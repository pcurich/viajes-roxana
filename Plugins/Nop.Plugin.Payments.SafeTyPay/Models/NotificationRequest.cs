using Nop.Plugin.Payments.SafeTyPay.Infrastructure;

namespace Nop.Plugin.Payments.SafeTyPay.Models
{
    public class NotificationRequest
    {
        //String (lenght = 32) Merchant Api Key generated by using the MMS.
        public string ApiKey { get; set; } //23f1d7e1b2d44b7fb43e4bcddee45689

        //String (ISO 8601: yyyy-MM-ddThh:mm:ss) Merchant Date and Time used to compose signature
        public string RequestDateTime { get; set; } //2007-01-31T14:24:59

        //String (max-lenght = 20) Reference number of the sale. (the same used in the purchase process or call to CreateTokenExpress)
        public string MerchantSalesID { get; set; } //001-012312220, etc.

        //String(lenght = 16) SafetyPay's Operation Identifier
        public string ReferenceNo { get; set; } //0119182951762562

        //String (ISO 8601: yyyy-MM-ddThh:mm:ss) Creation date of the transaction
        public string CreationDateTime { get; set; } //2007-01-31T14:24:59

        //Decimal The amount of the transaction.Use 2 decimals.
        public decimal Amount { get; set; } //100.00

        //String(ISO-4217) Currency of the transaction
        public string CurrencyId { get; set; }// USD, EUR, MXN, etc.

        //String(max-lenght = 20) Reference number of the payment operation
        public string PaymentReferenceNo { get; set; }  //871972462221

        //StatusType Status of SafetyPay operation
        public string StatusCode { get; set; }  //“102”, “201”, etc

        public string Signature { get; set; } //Hash SHA256 :
                                              //RequestDateTime
                                              //+MerchantSalesID
                                              //+ReferenceNo
                                              //+CreationDateTime
                                              //+Amount
                                              //+CurrencyID
                                              //+PaymentReferenceNo
                                              //+Status
                                              //+SignatureKey

        public bool IsValid(string signatureKey)
        {
            var signature = SafeTyPayHelper.ComputeSha256Hash(this, signatureKey);
            return Signature == signature;
        }
    }
}